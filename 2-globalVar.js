// 2. 全局变量（部分）及其内容说明
// 这是javascript代码中很多地方都有用到的全局变量数组，放在这里了
// 有一些只在很小的地方用得到的，虽然也是全局变量，还是在见到时再说明吧

let n=10201;
// let n=1000; // 小数据量用于debug……


// 节点数组，用于计算
let point = []; 
// 结构上，是一个对象数组，每个点对象元素拥有2个属性，x坐标和y坐标
// point大小为点的数量，下标为随机点的生成顺序（编号）


// 节点图层数组，用于与mapvgl配合实现可视化
let points = [];
// 结构上，也是一个对象数组，每个点对象有一个属性，geometry，翻译过来是几何学
// geometry属性本身的值也是一个对象
// 这个对象拥有2个属性，type：这里是Point类型、coordinates：意为坐标，是一个大小为2的数组，存放x坐标和y坐标
// points大小为点的数量，下标为点的编号



// 以下注意：（会重复的）代表length===点数，以节点为主要手段统计边信息
//    而（不重复的）代表length===边数，以边为主要手段统计节点信息

// （会重复的）连边数组，邻接表，里面也存有distance信息
let line = []; 
// 结构上，是三维数组，对每个点元素i，都有数个其相连接的点数组元素，这些元素本身是一个大小为3的数组
// [0]存放的是每个点相邻节点的编号，[1]存放的是二者之间的距离，[2]存放的是二者之间的通行时间
// 需要特别注意的是，在一般情况下，根据大作业任务书中的描述，可以认为通行时间与距离成正比
// 为了方便起见，将这个通行时间与距离设置为相等的值
// 而当车流状况模拟加载上去之后，可能会导致时间与距离不再成正比，这时候再根据具体的逻辑更新[2]中的内容
// line大小为点的数量，下标为点的编号

// （不重复的）连边图层数组，里面存了点的地图坐标
let lines = []; 
// 结构上，与points几乎相同，唯一不同的是坐标是一个大小为2的二维数组，子数组大小也为2
// 分别对应了边的起点和终点的x坐标与y坐标
// lines大小为 !边! 的数量，值得注意的是，是不重复的边（也无向），因为在同一个地方画两道完全相同的线也没有意义


// （不重复的）连边辅助数组，主要在车流模拟用得到
let edge = []; 
// 结构上，是对象数组，每一个对象元素有4个属性
// first与second是每条边的起点与终点的编号，注意：second严格大于first，这也是方便一些处理过程
// third是一个二维数组，默认值是[-1,-1]，当车流设置的时候就成了每条边上的[当前车流量,道路承载量]
// forth是一个数字，是边的距离，注意只是距离，这个不会变成通行时间
// 大小是边的数量，


// 下面这两个看名字就能知道是和points与lines结构相同的，只是根据具体需要筛出来一部分元素放进去而已
let points_SPath = []; // 最短路径节点图层数组
let lines_SPath = []; // 最短路径连边图层数组


// 车流模拟辅助数组，存的是符合各种交通状况的边的下标
let traffic_Clear = []; // 道路通畅
let traffic_MildCongestion = []; // 轻度拥堵
let traffic_ModerateCongestion = []; // 中度拥堵
let traffic_SevereCongestion = []; // 重度拥堵


// 距离-->时间标记数组，在最短路径的时候用到，只存有变动的边，提高效率
let severe = []; 
